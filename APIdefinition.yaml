openapi: 3.0.0
info:
  title: 商品管理API
  version: '2.0.0'
  description: 商品管理システムのAPIインターフェース仕様

servers:
  - url: https://api.example.com/v2
    description: 本番環境
  - url: https://staging-api.example.com/v2
    description: ステージング環境

paths:
  /products:
    get:
      summary: 商品一覧取得
      description: 全商品の一覧を取得します
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      summary: 商品新規登録
      description: 新規商品を登録します
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        '201':
          description: 作成成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "PROD002"
                  message:
                    type: string
                    example: "商品が正常に登録されました"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /products/{id}:
    get:
      summary: 商品詳細取得
      description: 特定の商品の詳細情報を取得します
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: 商品ID
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: 商品情報更新
      description: 既存商品の情報を更新します
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: 更新する商品ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdate'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "PROD001"
                  message:
                    type: string
                    example: "商品情報が正常に更新されました"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: 商品削除
      description: 指定した商品を削除します
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: 削除する商品ID
      responses:
        '200':
          description: 削除成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "商品が正常に削除されました"
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /products/{id}/stock:
    put:
      summary: 在庫数更新
      description: 特定の商品の在庫数を更新します
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: 在庫数を更新する商品ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - stock_quantity
              properties:
                stock_quantity:
                  type: integer
                  minimum: 0
                  description: 新しい在庫数
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "PROD001"
                  current_stock:
                    type: integer
                    example: 15
                  message:
                    type: string
                    example: "在庫数が正常に更新されました"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /products/{barcode}/yahoo-check:
    post:
      summary: Yahoo APIチェック
      description: バーコードを使用してYahoo APIから商品情報を取得・チェックします
      parameters:
        - name: barcode
          in: path
          required: true
          schema:
            type: string
          description: Yahoo APIに送信するバーコード
      responses:
        '200':
          description: チェック成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  barcode:
                    type: string
                    example: "1234567890"
                  product_info:
                    type: object
                    properties:
                      name:
                        type: string
                        example: "Yahoo商品"
                      price:
                        type: integer
                        example: 1000
                      availability:
                        type: boolean
                        example: true
                  message:
                    type: string
                    example: "Yahoo APIチェック完了"
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /products/by-status:
    get:
      summary: ステータス別商品一覧取得
      description: ステータス別に商品の一覧を取得します
      parameters:
        - name: status
          in: query
          required: true
          schema:
            type: string
            enum: ['要購入', '在庫あり']
          description: 取得したい商品のステータス
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /products/by-store/{store}:
    get:
      summary: 購入先別商品一覧取得
      description: 指定した購入先の商品の一覧を取得します
      parameters:
        - name: store
          in: path
          required: true
          schema:
            type: string
          description: 商品の購入先名
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    Product:
      type: object
      required:
        - id
        - name
        - status
        - yahoo_checked
        - webhook_checked
        - purchase_location
      properties:
        id:
          type: string
          example: "PROD001"
        name:
          type: string
          example: "サンプル商品"
        image_path:
          type: string
          nullable: true
          example: "/images/product.jpg"
        order_url:
          type: string
          nullable: true
          example: "https://example.com/order"
        barcode:
          type: string
          nullable: true
          example: "1234567890"
        status:
          type: string
          enum: ['在庫あり', '要購入']
          example: "在庫あり"
        description:
          type: string
          nullable: true
          example: "商品の詳細説明"
        yahoo_checked:
          type: boolean
          example: false
        webhook_checked:
          type: boolean
          example: false
        purchase_location:
          type: string
          example: "Amazon"
        stock_quantity:
          type: integer
          minimum: 0
          default: 1
          example: 10
        minimum_stock:
          type: integer
          minimum: 0
          default: 1
          example: 5
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ProductCreate:
      type: object
      required:
        - name
        - purchase_location
      properties:
        name:
          type: string
          maxLength: 100
          example: "新商品"
        image_path:
          type: string
          nullable: true
        order_url:
          type: string
          nullable: true
        barcode:
          type: string
          nullable: true
        description:
          type: string
          maxLength: 1000
          nullable: true
        purchase_location:
          type: string
          maxLength: 50
        stock_quantity:
          type: integer
          minimum: 0
          default: 1
        minimum_stock:
          type: integer
          minimum: 0
          default: 1

    ProductUpdate:
      type: object
      properties:
        id:
          type: string
          example: "PROD001"
        name:
          type: string
          maxLength: 100
        image_path:
          type: string
        order_url:
          type: string
        barcode:
          type: string
        description:
          type: string
          maxLength: 1000
        purchase_location:
          type: string
          maxLength: 50
        stock_quantity:
          type: integer
          minimum: 0
        minimum_stock:
          type: integer
          minimum: 0

  responses:
    BadRequest:
      description: リクエストが不正です
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  code:
                    type: string
                    example: "INVALID_REQUEST"
                  message:
                    type: string
                    example: "リクエストパラメータが不正です"

    NotFound:
      description: リソースが見つかりません
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  code:
                    type: string
                    example: "RESOURCE_NOT_FOUND"
                  message:
                    type: string
                    example: "指定されたリソースが見つかりません"

    InternalServerError:
      description: サーバー内部エラー
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  message:
                    type: string
                    example: "サーバー内部でエラーが発生しました"
